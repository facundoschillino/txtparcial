por composicion:
isDigit :: Char -> Bool
isDigit c = c >= '0' && c <= '9'
con condicional:
abs :: Int -> Int
abs n = if n >= 0 then n else -n
con guardas
signum n | n < 0 = -1
    | n == 0 = 0
    | otherwise = 1
funciones por comprension
[x^2 | x <- [2..5]] = [4,9,16,25]
recursivas
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * factorial (n - 1)

ejercicio:
firstLetters :: [String] -> [Char]
firstLetters words = [head word | word <- words, not (null word)]

La función "fisrtsLetters" es una función que recibe una cadena de caracteres (string) y retorna como resultado un único caracter.
La función recibe la variable "words". Esta retorna la primera letra de la palabra si esta es no nula. Podemos ver una fiuncion por comprension y una función de orden superior con el uso de la palabra head, que nos retorna la primera letra de una palabra.